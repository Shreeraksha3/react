import React, { useState } from 'react';
import './App.css'; // Ensure this has styles (I'll give a sample below)

const FormLikeToDo = () => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [users, setUsers] = useState([]);
  const [errors, setErrors] = useState({});

  const sanitizeInput = (input) => input.replace(/[<>/'"]/g, '').trim();

  const validate = () => {
    const newErrors = {};
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    if (!name.trim()) newErrors.name = 'Name is required.';
    if (!email.trim()) newErrors.email = 'Email is required.';
    else if (!emailRegex.test(email)) newErrors.email = 'Invalid email format.';
    if (!password) newErrors.password = 'Password is required.';
    else if (password.length < 6) newErrors.password = 'Password must be at least 6 characters.';

    return newErrors;
  };

  const addUser = () => {
    const newErrors = validate();
    setErrors(newErrors);

    if (Object.keys(newErrors).length === 0) {
      const newUser = {
        id: Date.now(),
        name: sanitizeInput(name),
        email: sanitizeInput(email),
        password: sanitizeInput(password),
      };
      setUsers((prev) => [...prev, newUser]);
      setName('');
      setEmail('');
      setPassword('');
      setShowPassword(false);
    }
  };

  const deleteUser = (id) => {
    setUsers((prev) => prev.filter((user) => user.id !== id));
  };

  return (
    <div className="form-container">
      <h2 className="form-title">User Registration</h2>

      <div className="form-group">
        <input
          type="text"
          placeholder="Enter Name"
          value={name}
          onChange={(e) => setName(e.target.value)}
          className={`form-input ${errors.name ? 'error' : ''}`}
        />
        {errors.name && <p className="error-text">{errors.name}</p>}
      </div>

      <div className="form-group">
        <input
          type="text"
          placeholder="Enter Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          className={`form-input ${errors.email ? 'error' : ''}`}
        />
        {errors.email && <p className="error-text">{errors.email}</p>}
      </div>

      <div className="form-group">
        <input
          type={showPassword ? 'text' : 'password'}
          placeholder="Enter Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          className={`form-input ${errors.password ? 'error' : ''}`}
        />
        {errors.password && <p className="error-text">{errors.password}</p>}
      </div>

      <div className="form-group checkbox-row">
        <label>
          <input
            type="checkbox"
            checked={showPassword}
            onChange={(e) => setShowPassword(e.target.checked)}
          />{' '}
          Show Password
        </label>
      </div>

      <button onClick={addUser} className="submit-btn">Add User</button>

      <ul className="task-list">
        {users.map(({ id, name, email, password }) => (
          <li key={id} className="task-item">
            <div className="task-left">
              <span className="task-text"><strong>Name:</strong> {name}</span>
              <span className="task-text"><strong>Email:</strong> {email}</span>
              <span className="task-text"><strong>Password:</strong> {password}</span>
            </div>
            <button className="delete-button" onClick={() => deleteUser(id)}>
              Delete
            </button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default FormLikeToDo;


App.css

.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
.form-container {
  max-width: 400px;
  margin: 30px auto;
  padding: 20px;
  border-radius: 8px;
  background-color: #ffffff;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.form-title {
  text-align: center;
  margin-bottom: 15px;
  font-size: 1.5rem;
  font-weight: bold;
}

.form-group {
  margin-bottom: 15px;
}

.form-input {
  width: 100%;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 1rem;
}

.form-input.error {
  border-color: red;
}

.error-text {
  color: red;
  font-size: 0.875rem;
  margin-top: 5px;
}

.checkbox-label {
  margin-top: 10px;
  display: block;
  font-size: 0.9rem;
}

.submit-btn {
  width: 100%;
  background-color: #007bff;
  color: white;
  padding: 10px;
  border: none;
  border-radius: 5px;
  font-size: 1rem;
  cursor: pointer;
}

.submit-btn:hover {
  background-color: #0056b3;
}

.success-box {
  margin-top: 20px;
  padding: 10px;
  border: 1px solid green;
  border-radius: 5px;
  background-color: #e6ffe6;
  color: green;
  font-size: 0.95rem;
}
.success-box {
  margin-top: 20px;
  padding: 15px;
  border: 1px solid green;
  border-radius: 8px;
  background-color: #f0fff0;
  color: #0a730a;
  font-size: 1rem;
}

.success-box h3 {
  margin-bottom: 10px;
}
